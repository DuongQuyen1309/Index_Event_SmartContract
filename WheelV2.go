// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wheel

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// WheelMetaData contains all meta data concerning the Wheel contract.
var WheelMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gafi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_birthday_ticket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prizeIds\",\"type\":\"uint256[]\"}],\"name\":\"ResponseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_EPSILON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyTicketByFish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivingWallet\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gas\",\"type\":\"uint32\"}],\"name\":\"changeGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"changeKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"changeLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"changePauseState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeTicketPriceByGAFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epsilon\",\"type\":\"uint256\"}],\"name\":\"changeTimeEpsilon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWordsIfChainlinkFail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockingTicketByFish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerTurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"spin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPriceByGAFI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topUpSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactionIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"transactionType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestFishID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_method\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// WheelABI is the input ABI used to generate the binding from.
// Deprecated: Use WheelMetaData.ABI instead.
var WheelABI = WheelMetaData.ABI

// WheelBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WheelMetaData.Bin instead.
var WheelBin = WheelMetaData.Bin

// DeployWheel deploys a new Ethereum contract, binding an instance of Wheel to it.
func DeployWheel(auth *bind.TransactOpts, backend bind.ContractBackend, _gafi common.Address, _birthday_ticket common.Address, _link common.Address, _vrfCoordinator common.Address, _keyHash [32]byte) (common.Address, *types.Transaction, *Wheel, error) {
	parsed, err := WheelMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WheelBin), backend, _gafi, _birthday_ticket, _link, _vrfCoordinator, _keyHash)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Wheel{WheelCaller: WheelCaller{contract: contract}, WheelTransactor: WheelTransactor{contract: contract}, WheelFilterer: WheelFilterer{contract: contract}}, nil
}

// Wheel is an auto generated Go binding around an Ethereum contract.
type Wheel struct {
	WheelCaller     // Read-only binding to the contract
	WheelTransactor // Write-only binding to the contract
	WheelFilterer   // Log filterer for contract events
}

// WheelCaller is an auto generated read-only Go binding around an Ethereum contract.
type WheelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WheelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WheelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WheelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WheelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WheelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WheelSession struct {
	Contract     *Wheel            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WheelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WheelCallerSession struct {
	Contract *WheelCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// WheelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WheelTransactorSession struct {
	Contract     *WheelTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WheelRaw is an auto generated low-level Go binding around an Ethereum contract.
type WheelRaw struct {
	Contract *Wheel // Generic contract binding to access the raw methods on
}

// WheelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WheelCallerRaw struct {
	Contract *WheelCaller // Generic read-only contract binding to access the raw methods on
}

// WheelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WheelTransactorRaw struct {
	Contract *WheelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWheel creates a new instance of Wheel, bound to a specific deployed contract.
func NewWheel(address common.Address, backend bind.ContractBackend) (*Wheel, error) {
	contract, err := bindWheel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Wheel{WheelCaller: WheelCaller{contract: contract}, WheelTransactor: WheelTransactor{contract: contract}, WheelFilterer: WheelFilterer{contract: contract}}, nil
}

// NewWheelCaller creates a new read-only instance of Wheel, bound to a specific deployed contract.
func NewWheelCaller(address common.Address, caller bind.ContractCaller) (*WheelCaller, error) {
	contract, err := bindWheel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WheelCaller{contract: contract}, nil
}

// NewWheelTransactor creates a new write-only instance of Wheel, bound to a specific deployed contract.
func NewWheelTransactor(address common.Address, transactor bind.ContractTransactor) (*WheelTransactor, error) {
	contract, err := bindWheel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WheelTransactor{contract: contract}, nil
}

// NewWheelFilterer creates a new log filterer instance of Wheel, bound to a specific deployed contract.
func NewWheelFilterer(address common.Address, filterer bind.ContractFilterer) (*WheelFilterer, error) {
	contract, err := bindWheel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WheelFilterer{contract: contract}, nil
}

// bindWheel binds a generic wrapper to an already deployed contract.
func bindWheel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := WheelMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wheel *WheelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wheel.Contract.WheelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wheel *WheelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wheel.Contract.WheelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wheel *WheelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wheel.Contract.WheelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wheel *WheelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wheel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wheel *WheelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wheel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wheel *WheelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wheel.Contract.contract.Transact(opts, method, params...)
}

// LOCKDURATION is a free data retrieval call binding the contract method 0x485d3834.
//
// Solidity: function LOCK_DURATION() view returns(uint256)
func (_Wheel *WheelCaller) LOCKDURATION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "LOCK_DURATION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LOCKDURATION is a free data retrieval call binding the contract method 0x485d3834.
//
// Solidity: function LOCK_DURATION() view returns(uint256)
func (_Wheel *WheelSession) LOCKDURATION() (*big.Int, error) {
	return _Wheel.Contract.LOCKDURATION(&_Wheel.CallOpts)
}

// LOCKDURATION is a free data retrieval call binding the contract method 0x485d3834.
//
// Solidity: function LOCK_DURATION() view returns(uint256)
func (_Wheel *WheelCallerSession) LOCKDURATION() (*big.Int, error) {
	return _Wheel.Contract.LOCKDURATION(&_Wheel.CallOpts)
}

// SIGNER is a free data retrieval call binding the contract method 0x582abd12.
//
// Solidity: function SIGNER() view returns(address)
func (_Wheel *WheelCaller) SIGNER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "SIGNER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SIGNER is a free data retrieval call binding the contract method 0x582abd12.
//
// Solidity: function SIGNER() view returns(address)
func (_Wheel *WheelSession) SIGNER() (common.Address, error) {
	return _Wheel.Contract.SIGNER(&_Wheel.CallOpts)
}

// SIGNER is a free data retrieval call binding the contract method 0x582abd12.
//
// Solidity: function SIGNER() view returns(address)
func (_Wheel *WheelCallerSession) SIGNER() (common.Address, error) {
	return _Wheel.Contract.SIGNER(&_Wheel.CallOpts)
}

// TIMEEPSILON is a free data retrieval call binding the contract method 0xacf2f11a.
//
// Solidity: function TIME_EPSILON() view returns(uint256)
func (_Wheel *WheelCaller) TIMEEPSILON(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "TIME_EPSILON")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TIMEEPSILON is a free data retrieval call binding the contract method 0xacf2f11a.
//
// Solidity: function TIME_EPSILON() view returns(uint256)
func (_Wheel *WheelSession) TIMEEPSILON() (*big.Int, error) {
	return _Wheel.Contract.TIMEEPSILON(&_Wheel.CallOpts)
}

// TIMEEPSILON is a free data retrieval call binding the contract method 0xacf2f11a.
//
// Solidity: function TIME_EPSILON() view returns(uint256)
func (_Wheel *WheelCallerSession) TIMEEPSILON() (*big.Int, error) {
	return _Wheel.Contract.TIMEEPSILON(&_Wheel.CallOpts)
}

// LockingTicketByFish is a free data retrieval call binding the contract method 0x2dd45619.
//
// Solidity: function lockingTicketByFish(address ) view returns(uint256)
func (_Wheel *WheelCaller) LockingTicketByFish(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "lockingTicketByFish", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockingTicketByFish is a free data retrieval call binding the contract method 0x2dd45619.
//
// Solidity: function lockingTicketByFish(address ) view returns(uint256)
func (_Wheel *WheelSession) LockingTicketByFish(arg0 common.Address) (*big.Int, error) {
	return _Wheel.Contract.LockingTicketByFish(&_Wheel.CallOpts, arg0)
}

// LockingTicketByFish is a free data retrieval call binding the contract method 0x2dd45619.
//
// Solidity: function lockingTicketByFish(address ) view returns(uint256)
func (_Wheel *WheelCallerSession) LockingTicketByFish(arg0 common.Address) (*big.Int, error) {
	return _Wheel.Contract.LockingTicketByFish(&_Wheel.CallOpts, arg0)
}

// MaxPerTurn is a free data retrieval call binding the contract method 0xd7e4e8b6.
//
// Solidity: function maxPerTurn() view returns(uint256)
func (_Wheel *WheelCaller) MaxPerTurn(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "maxPerTurn")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxPerTurn is a free data retrieval call binding the contract method 0xd7e4e8b6.
//
// Solidity: function maxPerTurn() view returns(uint256)
func (_Wheel *WheelSession) MaxPerTurn() (*big.Int, error) {
	return _Wheel.Contract.MaxPerTurn(&_Wheel.CallOpts)
}

// MaxPerTurn is a free data retrieval call binding the contract method 0xd7e4e8b6.
//
// Solidity: function maxPerTurn() view returns(uint256)
func (_Wheel *WheelCallerSession) MaxPerTurn() (*big.Int, error) {
	return _Wheel.Contract.MaxPerTurn(&_Wheel.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wheel *WheelCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wheel *WheelSession) Owner() (common.Address, error) {
	return _Wheel.Contract.Owner(&_Wheel.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wheel *WheelCallerSession) Owner() (common.Address, error) {
	return _Wheel.Contract.Owner(&_Wheel.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Wheel *WheelCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Wheel *WheelSession) Paused() (bool, error) {
	return _Wheel.Contract.Paused(&_Wheel.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Wheel *WheelCallerSession) Paused() (bool, error) {
	return _Wheel.Contract.Paused(&_Wheel.CallOpts)
}

// RequestToUser is a free data retrieval call binding the contract method 0x3e2f7eb5.
//
// Solidity: function requestToUser(uint256 ) view returns(address)
func (_Wheel *WheelCaller) RequestToUser(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "requestToUser", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RequestToUser is a free data retrieval call binding the contract method 0x3e2f7eb5.
//
// Solidity: function requestToUser(uint256 ) view returns(address)
func (_Wheel *WheelSession) RequestToUser(arg0 *big.Int) (common.Address, error) {
	return _Wheel.Contract.RequestToUser(&_Wheel.CallOpts, arg0)
}

// RequestToUser is a free data retrieval call binding the contract method 0x3e2f7eb5.
//
// Solidity: function requestToUser(uint256 ) view returns(address)
func (_Wheel *WheelCallerSession) RequestToUser(arg0 *big.Int) (common.Address, error) {
	return _Wheel.Contract.RequestToUser(&_Wheel.CallOpts, arg0)
}

// SubscriptionId is a free data retrieval call binding the contract method 0x09c1ba2e.
//
// Solidity: function subscriptionId() view returns(uint64)
func (_Wheel *WheelCaller) SubscriptionId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "subscriptionId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// SubscriptionId is a free data retrieval call binding the contract method 0x09c1ba2e.
//
// Solidity: function subscriptionId() view returns(uint64)
func (_Wheel *WheelSession) SubscriptionId() (uint64, error) {
	return _Wheel.Contract.SubscriptionId(&_Wheel.CallOpts)
}

// SubscriptionId is a free data retrieval call binding the contract method 0x09c1ba2e.
//
// Solidity: function subscriptionId() view returns(uint64)
func (_Wheel *WheelCallerSession) SubscriptionId() (uint64, error) {
	return _Wheel.Contract.SubscriptionId(&_Wheel.CallOpts)
}

// TicketPriceByGAFI is a free data retrieval call binding the contract method 0x4f47afab.
//
// Solidity: function ticketPriceByGAFI() view returns(uint256)
func (_Wheel *WheelCaller) TicketPriceByGAFI(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "ticketPriceByGAFI")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TicketPriceByGAFI is a free data retrieval call binding the contract method 0x4f47afab.
//
// Solidity: function ticketPriceByGAFI() view returns(uint256)
func (_Wheel *WheelSession) TicketPriceByGAFI() (*big.Int, error) {
	return _Wheel.Contract.TicketPriceByGAFI(&_Wheel.CallOpts)
}

// TicketPriceByGAFI is a free data retrieval call binding the contract method 0x4f47afab.
//
// Solidity: function ticketPriceByGAFI() view returns(uint256)
func (_Wheel *WheelCallerSession) TicketPriceByGAFI() (*big.Int, error) {
	return _Wheel.Contract.TicketPriceByGAFI(&_Wheel.CallOpts)
}

// TransactionIds is a free data retrieval call binding the contract method 0x4d4912aa.
//
// Solidity: function transactionIds(address , uint256 ) view returns(uint256)
func (_Wheel *WheelCaller) TransactionIds(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "transactionIds", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TransactionIds is a free data retrieval call binding the contract method 0x4d4912aa.
//
// Solidity: function transactionIds(address , uint256 ) view returns(uint256)
func (_Wheel *WheelSession) TransactionIds(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Wheel.Contract.TransactionIds(&_Wheel.CallOpts, arg0, arg1)
}

// TransactionIds is a free data retrieval call binding the contract method 0x4d4912aa.
//
// Solidity: function transactionIds(address , uint256 ) view returns(uint256)
func (_Wheel *WheelCallerSession) TransactionIds(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Wheel.Contract.TransactionIds(&_Wheel.CallOpts, arg0, arg1)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(uint256 timestamp, uint256 amount, address user, uint8 transactionType)
func (_Wheel *WheelCaller) Transactions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Timestamp       *big.Int
	Amount          *big.Int
	User            common.Address
	TransactionType uint8
}, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "transactions", arg0)

	outstruct := new(struct {
		Timestamp       *big.Int
		Amount          *big.Int
		User            common.Address
		TransactionType uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.User = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.TransactionType = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(uint256 timestamp, uint256 amount, address user, uint8 transactionType)
func (_Wheel *WheelSession) Transactions(arg0 *big.Int) (struct {
	Timestamp       *big.Int
	Amount          *big.Int
	User            common.Address
	TransactionType uint8
}, error) {
	return _Wheel.Contract.Transactions(&_Wheel.CallOpts, arg0)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(uint256 timestamp, uint256 amount, address user, uint8 transactionType)
func (_Wheel *WheelCallerSession) Transactions(arg0 *big.Int) (struct {
	Timestamp       *big.Int
	Amount          *big.Int
	User            common.Address
	TransactionType uint8
}, error) {
	return _Wheel.Contract.Transactions(&_Wheel.CallOpts, arg0)
}

// Verify is a free data retrieval call binding the contract method 0xefe0196e.
//
// Solidity: function verify(address _signer, address _user, uint256 _requestFishID, string _method, uint256 _timestamp, uint256 _amount, bytes signature) pure returns(bool)
func (_Wheel *WheelCaller) Verify(opts *bind.CallOpts, _signer common.Address, _user common.Address, _requestFishID *big.Int, _method string, _timestamp *big.Int, _amount *big.Int, signature []byte) (bool, error) {
	var out []interface{}
	err := _Wheel.contract.Call(opts, &out, "verify", _signer, _user, _requestFishID, _method, _timestamp, _amount, signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xefe0196e.
//
// Solidity: function verify(address _signer, address _user, uint256 _requestFishID, string _method, uint256 _timestamp, uint256 _amount, bytes signature) pure returns(bool)
func (_Wheel *WheelSession) Verify(_signer common.Address, _user common.Address, _requestFishID *big.Int, _method string, _timestamp *big.Int, _amount *big.Int, signature []byte) (bool, error) {
	return _Wheel.Contract.Verify(&_Wheel.CallOpts, _signer, _user, _requestFishID, _method, _timestamp, _amount, signature)
}

// Verify is a free data retrieval call binding the contract method 0xefe0196e.
//
// Solidity: function verify(address _signer, address _user, uint256 _requestFishID, string _method, uint256 _timestamp, uint256 _amount, bytes signature) pure returns(bool)
func (_Wheel *WheelCallerSession) Verify(_signer common.Address, _user common.Address, _requestFishID *big.Int, _method string, _timestamp *big.Int, _amount *big.Int, signature []byte) (bool, error) {
	return _Wheel.Contract.Verify(&_Wheel.CallOpts, _signer, _user, _requestFishID, _method, _timestamp, _amount, signature)
}

// AddConsumer is a paid mutator transaction binding the contract method 0x112940f9.
//
// Solidity: function addConsumer(address consumerAddress) returns()
func (_Wheel *WheelTransactor) AddConsumer(opts *bind.TransactOpts, consumerAddress common.Address) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "addConsumer", consumerAddress)
}

// AddConsumer is a paid mutator transaction binding the contract method 0x112940f9.
//
// Solidity: function addConsumer(address consumerAddress) returns()
func (_Wheel *WheelSession) AddConsumer(consumerAddress common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.AddConsumer(&_Wheel.TransactOpts, consumerAddress)
}

// AddConsumer is a paid mutator transaction binding the contract method 0x112940f9.
//
// Solidity: function addConsumer(address consumerAddress) returns()
func (_Wheel *WheelTransactorSession) AddConsumer(consumerAddress common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.AddConsumer(&_Wheel.TransactOpts, consumerAddress)
}

// BuyTicket is a paid mutator transaction binding the contract method 0x67dd74ca.
//
// Solidity: function buyTicket(uint256 amount) returns()
func (_Wheel *WheelTransactor) BuyTicket(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "buyTicket", amount)
}

// BuyTicket is a paid mutator transaction binding the contract method 0x67dd74ca.
//
// Solidity: function buyTicket(uint256 amount) returns()
func (_Wheel *WheelSession) BuyTicket(amount *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.BuyTicket(&_Wheel.TransactOpts, amount)
}

// BuyTicket is a paid mutator transaction binding the contract method 0x67dd74ca.
//
// Solidity: function buyTicket(uint256 amount) returns()
func (_Wheel *WheelTransactorSession) BuyTicket(amount *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.BuyTicket(&_Wheel.TransactOpts, amount)
}

// BuyTicketByFish is a paid mutator transaction binding the contract method 0x12029f88.
//
// Solidity: function buyTicketByFish(uint256 requestId, uint256 timestamp, uint256 amount, bytes signature) returns()
func (_Wheel *WheelTransactor) BuyTicketByFish(opts *bind.TransactOpts, requestId *big.Int, timestamp *big.Int, amount *big.Int, signature []byte) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "buyTicketByFish", requestId, timestamp, amount, signature)
}

// BuyTicketByFish is a paid mutator transaction binding the contract method 0x12029f88.
//
// Solidity: function buyTicketByFish(uint256 requestId, uint256 timestamp, uint256 amount, bytes signature) returns()
func (_Wheel *WheelSession) BuyTicketByFish(requestId *big.Int, timestamp *big.Int, amount *big.Int, signature []byte) (*types.Transaction, error) {
	return _Wheel.Contract.BuyTicketByFish(&_Wheel.TransactOpts, requestId, timestamp, amount, signature)
}

// BuyTicketByFish is a paid mutator transaction binding the contract method 0x12029f88.
//
// Solidity: function buyTicketByFish(uint256 requestId, uint256 timestamp, uint256 amount, bytes signature) returns()
func (_Wheel *WheelTransactorSession) BuyTicketByFish(requestId *big.Int, timestamp *big.Int, amount *big.Int, signature []byte) (*types.Transaction, error) {
	return _Wheel.Contract.BuyTicketByFish(&_Wheel.TransactOpts, requestId, timestamp, amount, signature)
}

// CancelSubscription is a paid mutator transaction binding the contract method 0x93d81d58.
//
// Solidity: function cancelSubscription(address receivingWallet) returns()
func (_Wheel *WheelTransactor) CancelSubscription(opts *bind.TransactOpts, receivingWallet common.Address) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "cancelSubscription", receivingWallet)
}

// CancelSubscription is a paid mutator transaction binding the contract method 0x93d81d58.
//
// Solidity: function cancelSubscription(address receivingWallet) returns()
func (_Wheel *WheelSession) CancelSubscription(receivingWallet common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.CancelSubscription(&_Wheel.TransactOpts, receivingWallet)
}

// CancelSubscription is a paid mutator transaction binding the contract method 0x93d81d58.
//
// Solidity: function cancelSubscription(address receivingWallet) returns()
func (_Wheel *WheelTransactorSession) CancelSubscription(receivingWallet common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.CancelSubscription(&_Wheel.TransactOpts, receivingWallet)
}

// ChangeGas is a paid mutator transaction binding the contract method 0xe23214b7.
//
// Solidity: function changeGas(uint32 _gas) returns()
func (_Wheel *WheelTransactor) ChangeGas(opts *bind.TransactOpts, _gas uint32) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "changeGas", _gas)
}

// ChangeGas is a paid mutator transaction binding the contract method 0xe23214b7.
//
// Solidity: function changeGas(uint32 _gas) returns()
func (_Wheel *WheelSession) ChangeGas(_gas uint32) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeGas(&_Wheel.TransactOpts, _gas)
}

// ChangeGas is a paid mutator transaction binding the contract method 0xe23214b7.
//
// Solidity: function changeGas(uint32 _gas) returns()
func (_Wheel *WheelTransactorSession) ChangeGas(_gas uint32) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeGas(&_Wheel.TransactOpts, _gas)
}

// ChangeKeyHash is a paid mutator transaction binding the contract method 0x2f68f482.
//
// Solidity: function changeKeyHash(bytes32 _keyHash) returns()
func (_Wheel *WheelTransactor) ChangeKeyHash(opts *bind.TransactOpts, _keyHash [32]byte) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "changeKeyHash", _keyHash)
}

// ChangeKeyHash is a paid mutator transaction binding the contract method 0x2f68f482.
//
// Solidity: function changeKeyHash(bytes32 _keyHash) returns()
func (_Wheel *WheelSession) ChangeKeyHash(_keyHash [32]byte) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeKeyHash(&_Wheel.TransactOpts, _keyHash)
}

// ChangeKeyHash is a paid mutator transaction binding the contract method 0x2f68f482.
//
// Solidity: function changeKeyHash(bytes32 _keyHash) returns()
func (_Wheel *WheelTransactorSession) ChangeKeyHash(_keyHash [32]byte) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeKeyHash(&_Wheel.TransactOpts, _keyHash)
}

// ChangeLockDuration is a paid mutator transaction binding the contract method 0x27a59fb8.
//
// Solidity: function changeLockDuration(uint256 lockDuration) returns()
func (_Wheel *WheelTransactor) ChangeLockDuration(opts *bind.TransactOpts, lockDuration *big.Int) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "changeLockDuration", lockDuration)
}

// ChangeLockDuration is a paid mutator transaction binding the contract method 0x27a59fb8.
//
// Solidity: function changeLockDuration(uint256 lockDuration) returns()
func (_Wheel *WheelSession) ChangeLockDuration(lockDuration *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeLockDuration(&_Wheel.TransactOpts, lockDuration)
}

// ChangeLockDuration is a paid mutator transaction binding the contract method 0x27a59fb8.
//
// Solidity: function changeLockDuration(uint256 lockDuration) returns()
func (_Wheel *WheelTransactorSession) ChangeLockDuration(lockDuration *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeLockDuration(&_Wheel.TransactOpts, lockDuration)
}

// ChangePauseState is a paid mutator transaction binding the contract method 0xd95b3221.
//
// Solidity: function changePauseState(bool state) returns()
func (_Wheel *WheelTransactor) ChangePauseState(opts *bind.TransactOpts, state bool) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "changePauseState", state)
}

// ChangePauseState is a paid mutator transaction binding the contract method 0xd95b3221.
//
// Solidity: function changePauseState(bool state) returns()
func (_Wheel *WheelSession) ChangePauseState(state bool) (*types.Transaction, error) {
	return _Wheel.Contract.ChangePauseState(&_Wheel.TransactOpts, state)
}

// ChangePauseState is a paid mutator transaction binding the contract method 0xd95b3221.
//
// Solidity: function changePauseState(bool state) returns()
func (_Wheel *WheelTransactorSession) ChangePauseState(state bool) (*types.Transaction, error) {
	return _Wheel.Contract.ChangePauseState(&_Wheel.TransactOpts, state)
}

// ChangeSigner is a paid mutator transaction binding the contract method 0xaad2b723.
//
// Solidity: function changeSigner(address signer) returns()
func (_Wheel *WheelTransactor) ChangeSigner(opts *bind.TransactOpts, signer common.Address) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "changeSigner", signer)
}

// ChangeSigner is a paid mutator transaction binding the contract method 0xaad2b723.
//
// Solidity: function changeSigner(address signer) returns()
func (_Wheel *WheelSession) ChangeSigner(signer common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeSigner(&_Wheel.TransactOpts, signer)
}

// ChangeSigner is a paid mutator transaction binding the contract method 0xaad2b723.
//
// Solidity: function changeSigner(address signer) returns()
func (_Wheel *WheelTransactorSession) ChangeSigner(signer common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeSigner(&_Wheel.TransactOpts, signer)
}

// ChangeTicketPriceByGAFI is a paid mutator transaction binding the contract method 0xfde4e90d.
//
// Solidity: function changeTicketPriceByGAFI(uint256 price) returns()
func (_Wheel *WheelTransactor) ChangeTicketPriceByGAFI(opts *bind.TransactOpts, price *big.Int) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "changeTicketPriceByGAFI", price)
}

// ChangeTicketPriceByGAFI is a paid mutator transaction binding the contract method 0xfde4e90d.
//
// Solidity: function changeTicketPriceByGAFI(uint256 price) returns()
func (_Wheel *WheelSession) ChangeTicketPriceByGAFI(price *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeTicketPriceByGAFI(&_Wheel.TransactOpts, price)
}

// ChangeTicketPriceByGAFI is a paid mutator transaction binding the contract method 0xfde4e90d.
//
// Solidity: function changeTicketPriceByGAFI(uint256 price) returns()
func (_Wheel *WheelTransactorSession) ChangeTicketPriceByGAFI(price *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeTicketPriceByGAFI(&_Wheel.TransactOpts, price)
}

// ChangeTimeEpsilon is a paid mutator transaction binding the contract method 0xf292d50b.
//
// Solidity: function changeTimeEpsilon(uint256 epsilon) returns()
func (_Wheel *WheelTransactor) ChangeTimeEpsilon(opts *bind.TransactOpts, epsilon *big.Int) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "changeTimeEpsilon", epsilon)
}

// ChangeTimeEpsilon is a paid mutator transaction binding the contract method 0xf292d50b.
//
// Solidity: function changeTimeEpsilon(uint256 epsilon) returns()
func (_Wheel *WheelSession) ChangeTimeEpsilon(epsilon *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeTimeEpsilon(&_Wheel.TransactOpts, epsilon)
}

// ChangeTimeEpsilon is a paid mutator transaction binding the contract method 0xf292d50b.
//
// Solidity: function changeTimeEpsilon(uint256 epsilon) returns()
func (_Wheel *WheelTransactorSession) ChangeTimeEpsilon(epsilon *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.ChangeTimeEpsilon(&_Wheel.TransactOpts, epsilon)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0x95ccea67.
//
// Solidity: function emergencyWithdraw(address token, uint256 amount) returns()
func (_Wheel *WheelTransactor) EmergencyWithdraw(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "emergencyWithdraw", token, amount)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0x95ccea67.
//
// Solidity: function emergencyWithdraw(address token, uint256 amount) returns()
func (_Wheel *WheelSession) EmergencyWithdraw(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.EmergencyWithdraw(&_Wheel.TransactOpts, token, amount)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0x95ccea67.
//
// Solidity: function emergencyWithdraw(address token, uint256 amount) returns()
func (_Wheel *WheelTransactorSession) EmergencyWithdraw(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.EmergencyWithdraw(&_Wheel.TransactOpts, token, amount)
}

// EmergencyWithdrawAll is a paid mutator transaction binding the contract method 0xdd191719.
//
// Solidity: function emergencyWithdrawAll() returns()
func (_Wheel *WheelTransactor) EmergencyWithdrawAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "emergencyWithdrawAll")
}

// EmergencyWithdrawAll is a paid mutator transaction binding the contract method 0xdd191719.
//
// Solidity: function emergencyWithdrawAll() returns()
func (_Wheel *WheelSession) EmergencyWithdrawAll() (*types.Transaction, error) {
	return _Wheel.Contract.EmergencyWithdrawAll(&_Wheel.TransactOpts)
}

// EmergencyWithdrawAll is a paid mutator transaction binding the contract method 0xdd191719.
//
// Solidity: function emergencyWithdrawAll() returns()
func (_Wheel *WheelTransactorSession) EmergencyWithdrawAll() (*types.Transaction, error) {
	return _Wheel.Contract.EmergencyWithdrawAll(&_Wheel.TransactOpts)
}

// FulfillRandomWordsIfChainlinkFail is a paid mutator transaction binding the contract method 0xab8a4fc0.
//
// Solidity: function fulfillRandomWordsIfChainlinkFail(uint256 requestId, uint256[] randomWords) returns()
func (_Wheel *WheelTransactor) FulfillRandomWordsIfChainlinkFail(opts *bind.TransactOpts, requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "fulfillRandomWordsIfChainlinkFail", requestId, randomWords)
}

// FulfillRandomWordsIfChainlinkFail is a paid mutator transaction binding the contract method 0xab8a4fc0.
//
// Solidity: function fulfillRandomWordsIfChainlinkFail(uint256 requestId, uint256[] randomWords) returns()
func (_Wheel *WheelSession) FulfillRandomWordsIfChainlinkFail(requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.FulfillRandomWordsIfChainlinkFail(&_Wheel.TransactOpts, requestId, randomWords)
}

// FulfillRandomWordsIfChainlinkFail is a paid mutator transaction binding the contract method 0xab8a4fc0.
//
// Solidity: function fulfillRandomWordsIfChainlinkFail(uint256 requestId, uint256[] randomWords) returns()
func (_Wheel *WheelTransactorSession) FulfillRandomWordsIfChainlinkFail(requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.FulfillRandomWordsIfChainlinkFail(&_Wheel.TransactOpts, requestId, randomWords)
}

// RawFulfillRandomWords is a paid mutator transaction binding the contract method 0x1fe543e3.
//
// Solidity: function rawFulfillRandomWords(uint256 requestId, uint256[] randomWords) returns()
func (_Wheel *WheelTransactor) RawFulfillRandomWords(opts *bind.TransactOpts, requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "rawFulfillRandomWords", requestId, randomWords)
}

// RawFulfillRandomWords is a paid mutator transaction binding the contract method 0x1fe543e3.
//
// Solidity: function rawFulfillRandomWords(uint256 requestId, uint256[] randomWords) returns()
func (_Wheel *WheelSession) RawFulfillRandomWords(requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.RawFulfillRandomWords(&_Wheel.TransactOpts, requestId, randomWords)
}

// RawFulfillRandomWords is a paid mutator transaction binding the contract method 0x1fe543e3.
//
// Solidity: function rawFulfillRandomWords(uint256 requestId, uint256[] randomWords) returns()
func (_Wheel *WheelTransactorSession) RawFulfillRandomWords(requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.RawFulfillRandomWords(&_Wheel.TransactOpts, requestId, randomWords)
}

// RemoveConsumer is a paid mutator transaction binding the contract method 0x0e27e3df.
//
// Solidity: function removeConsumer(address consumerAddress) returns()
func (_Wheel *WheelTransactor) RemoveConsumer(opts *bind.TransactOpts, consumerAddress common.Address) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "removeConsumer", consumerAddress)
}

// RemoveConsumer is a paid mutator transaction binding the contract method 0x0e27e3df.
//
// Solidity: function removeConsumer(address consumerAddress) returns()
func (_Wheel *WheelSession) RemoveConsumer(consumerAddress common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.RemoveConsumer(&_Wheel.TransactOpts, consumerAddress)
}

// RemoveConsumer is a paid mutator transaction binding the contract method 0x0e27e3df.
//
// Solidity: function removeConsumer(address consumerAddress) returns()
func (_Wheel *WheelTransactorSession) RemoveConsumer(consumerAddress common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.RemoveConsumer(&_Wheel.TransactOpts, consumerAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Wheel *WheelTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Wheel *WheelSession) RenounceOwnership() (*types.Transaction, error) {
	return _Wheel.Contract.RenounceOwnership(&_Wheel.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Wheel *WheelTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Wheel.Contract.RenounceOwnership(&_Wheel.TransactOpts)
}

// Spin is a paid mutator transaction binding the contract method 0xa5b6ea8f.
//
// Solidity: function spin(uint256 amount) returns()
func (_Wheel *WheelTransactor) Spin(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "spin", amount)
}

// Spin is a paid mutator transaction binding the contract method 0xa5b6ea8f.
//
// Solidity: function spin(uint256 amount) returns()
func (_Wheel *WheelSession) Spin(amount *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.Spin(&_Wheel.TransactOpts, amount)
}

// Spin is a paid mutator transaction binding the contract method 0xa5b6ea8f.
//
// Solidity: function spin(uint256 amount) returns()
func (_Wheel *WheelTransactorSession) Spin(amount *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.Spin(&_Wheel.TransactOpts, amount)
}

// TopUpSubscription is a paid mutator transaction binding the contract method 0x7aa51754.
//
// Solidity: function topUpSubscription() returns()
func (_Wheel *WheelTransactor) TopUpSubscription(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "topUpSubscription")
}

// TopUpSubscription is a paid mutator transaction binding the contract method 0x7aa51754.
//
// Solidity: function topUpSubscription() returns()
func (_Wheel *WheelSession) TopUpSubscription() (*types.Transaction, error) {
	return _Wheel.Contract.TopUpSubscription(&_Wheel.TransactOpts)
}

// TopUpSubscription is a paid mutator transaction binding the contract method 0x7aa51754.
//
// Solidity: function topUpSubscription() returns()
func (_Wheel *WheelTransactorSession) TopUpSubscription() (*types.Transaction, error) {
	return _Wheel.Contract.TopUpSubscription(&_Wheel.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Wheel *WheelTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Wheel *WheelSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.TransferOwnership(&_Wheel.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Wheel *WheelTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Wheel.Contract.TransferOwnership(&_Wheel.TransactOpts, newOwner)
}

// WithdrawLink is a paid mutator transaction binding the contract method 0x54b7faae.
//
// Solidity: function withdrawLink(address to, uint256 amount) returns()
func (_Wheel *WheelTransactor) WithdrawLink(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Wheel.contract.Transact(opts, "withdrawLink", to, amount)
}

// WithdrawLink is a paid mutator transaction binding the contract method 0x54b7faae.
//
// Solidity: function withdrawLink(address to, uint256 amount) returns()
func (_Wheel *WheelSession) WithdrawLink(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.WithdrawLink(&_Wheel.TransactOpts, to, amount)
}

// WithdrawLink is a paid mutator transaction binding the contract method 0x54b7faae.
//
// Solidity: function withdrawLink(address to, uint256 amount) returns()
func (_Wheel *WheelTransactorSession) WithdrawLink(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Wheel.Contract.WithdrawLink(&_Wheel.TransactOpts, to, amount)
}

// WheelOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Wheel contract.
type WheelOwnershipTransferredIterator struct {
	Event *WheelOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WheelOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WheelOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WheelOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WheelOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WheelOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WheelOwnershipTransferred represents a OwnershipTransferred event raised by the Wheel contract.
type WheelOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Wheel *WheelFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*WheelOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Wheel.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &WheelOwnershipTransferredIterator{contract: _Wheel.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Wheel *WheelFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WheelOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Wheel.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WheelOwnershipTransferred)
				if err := _Wheel.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Wheel *WheelFilterer) ParseOwnershipTransferred(log types.Log) (*WheelOwnershipTransferred, error) {
	event := new(WheelOwnershipTransferred)
	if err := _Wheel.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WheelPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Wheel contract.
type WheelPausedIterator struct {
	Event *WheelPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WheelPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WheelPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WheelPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WheelPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WheelPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WheelPaused represents a Paused event raised by the Wheel contract.
type WheelPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Wheel *WheelFilterer) FilterPaused(opts *bind.FilterOpts) (*WheelPausedIterator, error) {

	logs, sub, err := _Wheel.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &WheelPausedIterator{contract: _Wheel.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Wheel *WheelFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *WheelPaused) (event.Subscription, error) {

	logs, sub, err := _Wheel.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WheelPaused)
				if err := _Wheel.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Wheel *WheelFilterer) ParsePaused(log types.Log) (*WheelPaused, error) {
	event := new(WheelPaused)
	if err := _Wheel.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WheelRequestCreatedIterator is returned from FilterRequestCreated and is used to iterate over the raw logs and unpacked data for RequestCreated events raised by the Wheel contract.
type WheelRequestCreatedIterator struct {
	Event *WheelRequestCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WheelRequestCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WheelRequestCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WheelRequestCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WheelRequestCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WheelRequestCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WheelRequestCreated represents a RequestCreated event raised by the Wheel contract.
type WheelRequestCreated struct {
	User      common.Address
	RequestId *big.Int
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestCreated is a free log retrieval operation binding the contract event 0x7920722cc1545f7b96cbc17d5dad10302e32f646bdb446d0a56fcce0438dd064.
//
// Solidity: event RequestCreated(address indexed user, uint256 indexed requestId, uint256 amount)
func (_Wheel *WheelFilterer) FilterRequestCreated(opts *bind.FilterOpts, user []common.Address, requestId []*big.Int) (*WheelRequestCreatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _Wheel.contract.FilterLogs(opts, "RequestCreated", userRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return &WheelRequestCreatedIterator{contract: _Wheel.contract, event: "RequestCreated", logs: logs, sub: sub}, nil
}

// WatchRequestCreated is a free log subscription operation binding the contract event 0x7920722cc1545f7b96cbc17d5dad10302e32f646bdb446d0a56fcce0438dd064.
//
// Solidity: event RequestCreated(address indexed user, uint256 indexed requestId, uint256 amount)
func (_Wheel *WheelFilterer) WatchRequestCreated(opts *bind.WatchOpts, sink chan<- *WheelRequestCreated, user []common.Address, requestId []*big.Int) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _Wheel.contract.WatchLogs(opts, "RequestCreated", userRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WheelRequestCreated)
				if err := _Wheel.contract.UnpackLog(event, "RequestCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestCreated is a log parse operation binding the contract event 0x7920722cc1545f7b96cbc17d5dad10302e32f646bdb446d0a56fcce0438dd064.
//
// Solidity: event RequestCreated(address indexed user, uint256 indexed requestId, uint256 amount)
func (_Wheel *WheelFilterer) ParseRequestCreated(log types.Log) (*WheelRequestCreated, error) {
	event := new(WheelRequestCreated)
	if err := _Wheel.contract.UnpackLog(event, "RequestCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WheelResponseCreatedIterator is returned from FilterResponseCreated and is used to iterate over the raw logs and unpacked data for ResponseCreated events raised by the Wheel contract.
type WheelResponseCreatedIterator struct {
	Event *WheelResponseCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WheelResponseCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WheelResponseCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WheelResponseCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WheelResponseCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WheelResponseCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WheelResponseCreated represents a ResponseCreated event raised by the Wheel contract.
type WheelResponseCreated struct {
	User      common.Address
	RequestId *big.Int
	PrizeIds  []*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterResponseCreated is a free log retrieval operation binding the contract event 0x2883f5d89ac17602ae2c5d09138857044d17c440a663edf9b36eb0a8418c0638.
//
// Solidity: event ResponseCreated(address indexed user, uint256 indexed requestId, uint256[] prizeIds)
func (_Wheel *WheelFilterer) FilterResponseCreated(opts *bind.FilterOpts, user []common.Address, requestId []*big.Int) (*WheelResponseCreatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _Wheel.contract.FilterLogs(opts, "ResponseCreated", userRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return &WheelResponseCreatedIterator{contract: _Wheel.contract, event: "ResponseCreated", logs: logs, sub: sub}, nil
}

// WatchResponseCreated is a free log subscription operation binding the contract event 0x2883f5d89ac17602ae2c5d09138857044d17c440a663edf9b36eb0a8418c0638.
//
// Solidity: event ResponseCreated(address indexed user, uint256 indexed requestId, uint256[] prizeIds)
func (_Wheel *WheelFilterer) WatchResponseCreated(opts *bind.WatchOpts, sink chan<- *WheelResponseCreated, user []common.Address, requestId []*big.Int) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _Wheel.contract.WatchLogs(opts, "ResponseCreated", userRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WheelResponseCreated)
				if err := _Wheel.contract.UnpackLog(event, "ResponseCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResponseCreated is a log parse operation binding the contract event 0x2883f5d89ac17602ae2c5d09138857044d17c440a663edf9b36eb0a8418c0638.
//
// Solidity: event ResponseCreated(address indexed user, uint256 indexed requestId, uint256[] prizeIds)
func (_Wheel *WheelFilterer) ParseResponseCreated(log types.Log) (*WheelResponseCreated, error) {
	event := new(WheelResponseCreated)
	if err := _Wheel.contract.UnpackLog(event, "ResponseCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WheelUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Wheel contract.
type WheelUnpausedIterator struct {
	Event *WheelUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WheelUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WheelUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WheelUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WheelUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WheelUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WheelUnpaused represents a Unpaused event raised by the Wheel contract.
type WheelUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Wheel *WheelFilterer) FilterUnpaused(opts *bind.FilterOpts) (*WheelUnpausedIterator, error) {

	logs, sub, err := _Wheel.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &WheelUnpausedIterator{contract: _Wheel.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Wheel *WheelFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *WheelUnpaused) (event.Subscription, error) {

	logs, sub, err := _Wheel.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WheelUnpaused)
				if err := _Wheel.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Wheel *WheelFilterer) ParseUnpaused(log types.Log) (*WheelUnpaused, error) {
	event := new(WheelUnpaused)
	if err := _Wheel.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
